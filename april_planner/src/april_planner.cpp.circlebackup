#include "ros/ros.h"
#include <tf/transform_datatypes.h>
#include "geometry_msgs/Twist.h"
#include "geometry_msgs/PoseStamped.h"
#include <apriltags/AprilTagDetections.h>

ros::Publisher pub;
ros::Subscriber sub;

geometry_msgs::Pose goal;
int goal_id;

// offset between the camera perspective and center of rotation of differential drive robot
double camera_offset_y = 0.205;

// realsense rgb camera is mounted slightly to the right of center
double camera_offset_x = 0.04;

double horiz_tolerance = 0.02;
double approach_padding = 0.3;

double max_vel = 0.05;

void control_step(const apriltags::AprilTagDetectionsConstPtr& d){
//  std::cout << d->header << std::endl;
//  std::cout << d->detections.size() << std::endl;

  if(d->detections.size() == 0){
    std::cout << "Warning: april planner lost detection" << std::endl;
    sub.shutdown();
    return;
  }
  apriltags::AprilTagDetection tag;
  bool found = false;
  for(int i=0; i < d->detections.size(); i++){
    if(d->detections[i].id == goal_id && d->detections[i].tag_size < 1 && d->detections[i].tag_size > 0.01){
      tag = d->detections[i];
      found = true;
      break;
    }
    //std::cout << d->detections[i].id << " | " << d->detections[i].tag_size << std::endl;
  }

  if(found==false){
    return;
  }

  // normalize camera position such that the tag is the fixed frame of reference
  //geometry_msgs::Pose camera_pose;
 // camera_pose.position.x = 
  tf::Quaternion q(tag.pose.orientation.x, tag.pose.orientation.y, tag.pose.orientation.z, tag.pose.orientation.w);
  tf::Matrix3x3 m(q);
  double roll, pitch, yaw;
  m.getRPY(roll, pitch, yaw);

  // tag is the fixed frame. note that we are working in camera screen coordinates
  //float horiz_offset = (tag.pose.position.x - tan(pitch)*tag.pose.position.z) - goal.position.x;
  double horiz_offset = cos(pitch)*(tag.pose.position.x + camera_offset_x - (tag.pose.position.z - camera_offset_y)*tan(pitch)) - goal.position.x;
  double vertical_offset = horiz_offset*tan(pitch) + (tag.pose.position.z - camera_offset_y)/cos(pitch) - approach_padding - goal.position.y;

  // state 1: orient
  // if our offset to the tag is greater than horiz_offset, orient to a circular arc that will correct the offset
  double phi = 0; // arc angle of our circular arc
  double dphi = 0;
//  if(fabs(horiz_offset) > horiz_tolerance*2){
    // find circular arc for our path
    phi = 2*atan(horiz_offset/sqrt(horiz_offset*horiz_offset+vertical_offset*vertical_offset));
    dphi = phi+pitch;
//  }
//  else{
//    dphi = pitch+tag.pose.position.x;
//  }

  //std::cout << "Roll: " << roll << ", Pitch: " << pitch << ", Yaw: " << yaw << std::endl;
  //std::cout << horiz_offset << "\t" <<  tag.pose.position.x  << "\t" << pitch << "\t" << tag.pose.position.z << std::endl;
  geometry_msgs::Twist msg;

  if(fabs(dphi) < 0.08){
    msg.linear.x = max_vel;
  }
  else{
    msg.linear.x = 0;
  }
  msg.linear.x = 0;
  msg.angular.z = -dphi; // simple proportional control
  std::cout << dphi << "\t" << phi << "\t" << pitch << "\t" << horiz_offset << "\t" << vertical_offset << std::endl;
  if(vertical_offset + approach_padding < horiz_tolerance){
    // stop subscribing after goal is reached
    sub.shutdown();
    return;
  }
  pub.publish(msg);
}


void goal_init(const geometry_msgs::PoseStampedConstPtr& goal_input){
  goal = goal_input->pose;
  goal_id = atoi(goal_input->header.frame_id.c_str());
  ros::NodeHandle n;
  sub = n.subscribe("detections", 1, control_step);
}


int main(int argc, char **argv){
  ros::init(argc, argv, "april_planner");
  ros::NodeHandle n;
  ros::Subscriber goal_sub = n.subscribe("goal", 1, goal_init);
  pub = n.advertise<geometry_msgs::Twist>("cmd_vel", 1);

  ros::spin();
}
